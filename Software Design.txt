#Software Design

	In order to make sure our software is as modular and therefore maintainable as possible, we will split out our code into seperate applications, with each script dealing with one specific job. In this section we will detail how our scripts will carry out each of their jobs and how they will communicate with one another. In our planning stage, we identified four jobs that need to be performed in order for our device to function.
	
##Web Application Backend

	This application is responsible for reciving data from the device, processing it, storing it and displaying in a clear and attractive way to the end user of our device. The application will require the user to login so that we can save their driving data specifically to their account online. When the user logs in, the user will be prompted to connect their device to their computer via USB, where the file stored on the device will be accessible. The file uploaded to the web application will contain a combination of the data about the car extracted via OBD and the GPX file generated from the devices GPS module. When uploaded, the data must then be processed and stored. To store the data we will use a MySQL database. To represent the journey, we will have a Journey table, with the User's ID as a foreign key. A Journey will have many Points, a table containing a latitude, longitude, timestamp and the Journey ID as a foreign key. We will then have an OnboardData table, containing all the information from the OBD interface, again with the Journey ID as a foreign key.
	
	To handle the visulisation of data, we will need to make use of the Open Street Maps API to display the GPS data for the journey. We will also need to develop a JavaScript library to allow us to render basic charts in the browser, for visualising feedback and comparing the users driving to that of other users on the system. The web application itself will be built using Ruby, HTML, Javascript and CSS and will be hosted on a server running Ubuntu Server 14.04.1 LTS. DigitalOcean, a cloud hosting company, kindly offer free credit to students, so we will be using them as our cloud service provider.
	
## GPS Extractor

	As we are using a USB GPS unit on our device, we will need a script to extract this data and store it in a file that can be uploaded to the web later. Because Python is recommended as the language of choice for Raspberry Pi, that is the langauge we will be using. One concern here is power, so we do not want to have a script running constantly on the device. Our plan is that every 10 seconds, our Python script will run, get the latitude and longitude from the GPS unit, store this data in a file with a timestamp and then sleep, until it wakes and repeats.
	
## File Format

## Render Data to Screen
	
## Development Cycle

	-	Connect Raspberry Pi with GPS adapter and OBD cable and enable the Pi to extract data from both these devices.
	-  Store data from both USB devices to a file on the Pi. We will need to implement the file format detailed above.
	- Build web application to upload file and show data in a meaningful way in the browser.
	- Implement showing the live data from the storage file on a small screen.